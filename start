#!/usr/bin/env bash
log()   { echo ">>> $1" ; }

[[ -d manifest-templates ]] || { echo >&2 "Please run this script from within the kubernetes folder"; exit 1; }

if [[ -z $KUBE_LOG_LEVEL ]]; then KUBE_LOG_LEVEL=0; fi
# interactive by default
interactive_mode=1

while [ $# -gt 0 ] ; do
  case $1 in
    --non-interactive)
      interactive_mode=0
      ;;
    *)
      log "Unknown argument $1"
      exit 1
      ;;
  esac
  shift
done

while (( $interactive_mode == 1)) ; do
  read -e -i "y" -p "Do you want to cleanup old containers? [Y/n] " yn
  case $yn in
      [Yy]* ) break;;
      [Nn]* ) exit 0;;
      * ) echo "Please answer yes (y) or no (n).";;
  esac
done

./cleanup

if [ -z ${VELUM_DIR+x} ]
then
    log "You must provide a VELUM_DIR, aborting"
    exit 1
fi

if [ -z ${SALT_DIR+x} ]
then
    log "You must provide a SALT_DIR, aborting"
    exit 1
fi

if [ -z ${CONTAINER_MANIFESTS_DIR+x} ]
then
    log "You must provide a CONTAINER_MANIFESTS_DIR, aborting"
    exit 1
fi

# cleaning up development image when necessary
if [ "$(docker images  --format '{{title .ID}}' sles12/velum:development)" != "" ]; then
  log "comparing remote and local Gemfile.lock to see if the local development image needs to be rebuilt"
  docker run --rm -v $VELUM_DIR:/srv/velum sles12/velum:development diff /var/lib/velum/Gemfile.lock /srv/velum/Gemfile.lock &> /dev/null

  if [ $? -ne 0 ]; then
    log "local velum image is old, cleaning it up to force a rebuild"
    for tag in 0.0 development; do
      docker rmi -f sles12/velum:$tag
    done
  fi
fi

ruby adapt_salt_config.rb $SALT_DIR > /dev/null

mkdir tmp/salt/config/admin
cp -r salt-admin-minion-config/* tmp/salt/config/admin

for template in $(ls $CONTAINER_MANIFESTS_DIR/*.yaml)
do
    log "Processing template $template..."
    cat $template | ruby process_manifest.rb $CONTAINER_MANIFESTS_DIR $VELUM_DIR $SALT_DIR > manifests/$(basename $template)
done

default_interface=$(awk '$2 == 00000000 { print $1 }' /proc/net/route)
ip_address=$(ip addr show $default_interface | awk '$1 == "inet" {print $2}' | cut -f1 -d/)

for template in $(ls manifest-templates/*.yaml)
do
    cat $template | ruby process_manifest.rb $CONTAINER_MANIFESTS_DIR $VELUM_DIR $SALT_DIR | sed -e "s#\${ip_address}#$ip_address#" > manifests/$(basename $template)
done

if ! $(which kubelet >&/dev/null); then
  log "To launch kubelet make sure to install kubernetes-node package first and run this script again..."
  exit 1
fi

# mariadb does not run as root, and therefore it cannot create its socket here by default, if the kubelet
# creates this file.
sudo mkdir -p $PWD/tmp/mariadb-socket
sudo chmod 777 $PWD/tmp/mariadb-socket

if [ -z "$SKIP_IMAGE_UPDATE" ]; then
  docker pull docker-testing-registry.suse.de/devel/sles12/velum-development | grep "up to date" &> /dev/null
  image_up_to_date=$?
fi

if [[ $image_up_to_date -ne 0 ]] ; then
  log "New Velum image found on the registry"
fi

if [[ $image_up_to_date -eq 0 ]] && ( docker images | grep "^sles12/velum" | grep development &> /dev/null ) ; then
  log "Velum development image is present and up to date"
else
  log "Building Velum development image..."
  CONTAINER_BUILD=`docker run -v $VELUM_DIR:/srv/velum -d docker-testing-registry.suse.de/devel/sles12/velum-development \
                    bash -c "gem install --no-ri --no-rdoc --install-dir /var/lib/velum/ruby/2.1.0 bundler && \
                    bundle config --local frozen 0 && \
                    bundle config --local build.nokogiri --use-system-libraries && \
                    bundle install --binstubs=/usr/local/bin --deployment --path=/var/lib/velum && \
                    cp Gemfile.lock /var/lib/velum/ && \
                    wget -q https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 -P /opt && \
                    tar -xjf /opt/phantomjs-2.1.1-linux-x86_64.tar.bz2 -C /opt && \
                    mv /opt/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin && \
                    rm -rf /opt/phantomjs-2.1.1-linux-x86_64"`
  docker logs -f $CONTAINER_BUILD
  docker commit $CONTAINER_BUILD sles12/velum:development
  docker rm $CONTAINER_BUILD

  # FIXME: remove this (read patch_schema for more information)
  bash ./patch_schema
fi

log "Initializing PKI..."
mkdir -p $PWD/tmp/fake-root/etc/pki
docker run --rm --network=host -v $PWD/tmp/fake-root/etc/pki:/etc/pki \
                               -v $CONTAINER_MANIFESTS_DIR/gen-certs.sh:/gen-certs.sh \
       sles12/velum:development /gen-certs.sh &> /dev/null

log "Launching kubelet"
sudo kubelet --pod-manifest-path=$PWD/manifests --root-dir=$PWD/tmp --v=$KUBE_LOG_LEVEL --address=127.0.0.1 --hostname-override=127.0.0.1 --cgroups-per-qos=false --enforce-node-allocatable=""
